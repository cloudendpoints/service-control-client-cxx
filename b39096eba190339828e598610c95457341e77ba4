Revision: b39096eba190339828e598610c95457341e77ba4
Patch-set: 5
File: check_aggregator_impl.cc

192:6-192:21
Thu Mar 03 00:57:21 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_b10158ea
Bytes: 309
@chengliang
as mentioned in the other cl, in this check aggregator, the flush_callback_ will trigger an asynchronous call into CheckAggregator::CacheResponse(). In your original call, you added ref_count_ check. But I didn't remember the purpose of that any more. Please double check if we still need it here.

192:6-192:21
Thu Mar 03 01:32:19 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_b10158ea
UUID: 02feade5_916b7c5e
Bytes: 106
The key different is:  This aggregator did not pass any callback to anybody. So it doesn't need ref_count.

192:6-192:21
Thu Mar 03 01:36:09 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_916b7c5e
UUID: e2927965_406c3243
Bytes: 111
what happen when the FlushCallback() needs to call aggregator::CacheResponse() but aggregator has been deleted?

192:6-192:21
Thu Mar 03 01:47:11 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: e2927965_406c3243
UUID: 02feade5_b1e5d821
Bytes: 222
FlushCallback() is provided by the callers.  It is caller job to make sure aggregator is valid before calling its method.

In another word,  the ref_count will be done in the high level callers, not in the aggregator code.

192:6-192:21
Thu Mar 03 02:04:58 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_b1e5d821
UUID: e2927965_23cd707c
Bytes: 470
can you update the chemist client library design doc the whole interaction between high-level caller and aggregator? I think these internal interface design is very important for us to understand the data flow.

I would like to understand the life time of the aggregator. It seems like you want the high level caller to manage the lifetime of the aggregator and make sure it will outlive the pending callbacks. Lets document all these details so we are on the same page.

File: check_aggregator_impl.h

22:3-22:9
Thu Mar 03 00:48:16 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_3189c8e3
Bytes: 279
could you comment/summarize here how this aggregator should be used?
i.e. what the caller needs to do if it is a cache hit, or returns NOT_FOUND. When it needs to call CacheResponse?

I saw you document some of them at each method. But probably it is easier to read in one place.

22:3-22:9
Thu Mar 03 01:32:19 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_3189c8e3
UUID: 02feade5_516574ab
Bytes: 4
Done

36:11-36:17
Thu Mar 03 00:48:16 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_f16760f4
Bytes: 103
also comment that the FlushCallback will also need to call CacheResponse() to update the check response

36:11-36:17
Thu Mar 03 01:32:19 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_f16760f4
UUID: 02feade5_b1767864
Bytes: 4
Done

42:39-42:46
Thu Mar 03 00:48:16 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_d1986430
Bytes: 94
the caller also needs to call CacheResponse() to update the cache, right? please comment that.

42:39-42:46
Thu Mar 03 01:32:19 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_d1986430
UUID: 02feade5_11d00c74
Bytes: 4
Done

49:35-49:48
Thu Mar 03 00:48:16 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_51cf3428
Bytes: 906
I like the original code better that hides Cache interface/implementation from the aggregator caller, where they just need to call Check()


My idea was passing a callback on_check_done as an arg to Check() method above (same as the original code). And this aggregator class will pass a callback on_flush_done to call FlushCallback(request, on_flush_done). on_flush_done(response, on_check_done) will be invoked when caller gets the response, which is implemented by the Aggregator to update the cache with the returned response and invoke on_check_done to notify the caller the check response. This way, we don't need to return "NOT_FOUND" to let caller dealing with these details when it calls Aggregator:Check() and all chemist interaction is triggered by FlushCallback.

Lets see if @chengliang and @huba can figure out a cleaner solution. Otherwise, I am fine if you strongly prefer existing approach.

49:35-49:48
Thu Mar 03 01:32:19 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_51cf3428
UUID: 02feade5_313d4875
Bytes: 223
That will make this cache/aggregator overly complicated. The current design is:  it is a cache and aggregator, that is it.  It will not help on_completion() async call.  It is high level tasks to handle on_completion stuff.

