Revision: 3755c367f31cc0f97ce97e7873557f9982ccc3b8
Patch-set: 3
File: aggregator_interface.h

79:6-79:22
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_ad98e22e
Bytes: 31
nit: ReportAggregatorInterface?

79:6-79:22
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_ad98e22e
UUID: 02feade5_eeeae154
Bytes: 112
Instead of xxx_interface for interface and xxx as its impl,
I prefer xxx as interface, and xxx_impl as its impl.

88:2-88:18
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_0d5756fb
Bytes: 32
make the constructor "protected"

88:2-88:18
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_0d5756fb
UUID: 02feade5_4ef03547
Bytes: 4
Done

102:33-102:37
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_ad462247
Bytes: 11
whom -> who

102:33-102:37
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_ad462247
UUID: 02feade5_8efa3d23
Bytes: 4
Done

113:6-113:21
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_6d3c1ac8
Bytes: 24
CheckAggregatorInterface

113:6-113:21
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_6d3c1ac8
UUID: 02feade5_0e0f4d13
Bytes: 21
Same comment as above

122:2-122:17
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_4d395ed6
Bytes: 9
protected

122:2-122:17
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_4d395ed6
UUID: 02feade5_ee13013f
Bytes: 4
Done

File: report_aggregator_impl.cc

18:5-18:26
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_aeca9961
Bytes: 51
HasHighImportanceOperation()
HighValue is confusing

18:5-18:26
Wed Mar 02 22:49:53 2016 +0000
Author: Dzmitry Huba <5165@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_aeca9961
UUID: 02feade5_ee36613b
Bytes: 128
To be precise they can either be of high or debug importance. In case you would like to make it more clear in the function name.

18:5-18:26
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_ee36613b
UUID: 02feade5_4e2b1579
Bytes: 28
Please suggest a better name

36:6-36:29
Wed Mar 02 22:49:53 2016 +0000
Author: Dzmitry Huba <5165@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_8e46bd99
Bytes: 153
What happens if the cache is not initialized? Do you protect other methods from that? If not, should you initialize the cache with some default settings?

36:6-36:29
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_8e46bd99
UUID: 02feade5_8ea07d6c
Bytes: 47
Yes, all methods are checking:

 if (cache) {
}

45:48-45:59
Wed Mar 02 22:49:53 2016 +0000
Author: Dzmitry Huba <5165@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_ee1f81a1
Bytes: 153
Can you please add comment here about flushing semantic. Is it blocking or asynchronous, if it is asynchronous, why it is safe to destroy the aggregator.

45:48-45:59
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_ee1f81a1
UUID: 02feade5_6e9d312e
Bytes: 41
Will add comment.  It is a blocking call.

45:48-45:59
Thu Mar 03 00:26:31 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_6e9d312e
UUID: 02feade5_b17b18c5
Bytes: 144
I thought you said that the Flush callback shouldn't be a blocking call. i.e. nginx won't block on subrequest() triggered by the flush clalback.

45:48-45:59
Thu Mar 03 00:37:22 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_b17b18c5
UUID: 02feade5_71187097
Bytes: 472
"blocking call" has to be clarified.

FlushAll() is a blocking call, it will wait until all cache items have been removed.

When removing each item,  we will call flush_callback() to send the item out.  This is a blocking call, we will wait for callback to return.

Ihe flush_callback (provided by high level or callers) is better to be light. If it has to make a remote call,  it is better to be non-blocking.  This is the requirement we imposed on the callback function.

69:2-69:5
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_0ee46df9
Bytes: 74
add comment here we start reporting request with low importance operations

69:2-69:5
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_0ee46df9
UUID: 02feade5_8e3cfdc8
Bytes: 4
Done

92:20-92:27
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_2ea5e9cb
Bytes: 298
so, we don't need to track those pending flush calls like the original code?

I cannot remember why we were waiting there. Couldn't find comment for that either. There should be a reason. Lets consult with @chengliang and see if he remembered. just make sure we didn't miss out something important.

92:20-92:27
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_2ea5e9cb
UUID: 02feade5_8e77dda4
Bytes: 95
I looked at the Google3 code, I did not see "the wait".  which "wait" are you are referring to?

92:20-92:27
Thu Mar 03 00:26:31 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_8e77dda4
UUID: 02feade5_518a9409
Bytes: 258
sorry, I wasn't clear. I mean  blocking_ref_count_ reference.

and the aggregator shutdown needs to do https://cs.corp.google.com/piper///depot/google3/apiserving/servicecontrol/client/report_aggregator.cc?rcl=115766333&l=183 
to wait on this reference count

92:20-92:27
Thu Mar 03 00:37:22 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_518a9409
UUID: 02feade5_f1b000c2
Bytes: 131
We don't have this problem.  The library did not provide any callback function to be called. So we don't need to ref-count ourself.

92:20-92:27
Thu Mar 03 00:55:16 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_f1b000c2
UUID: 02feade5_f1eac054
Bytes: 286
probably it is fine for Report aggregator. But let @chengliang double read it.

For check aggregator, in my understanding, indirectly there is a callback to call into CacheResponse() when you do FlushCallback(). Lets be more careful on that other cl. Let me post the same comment there.

92:20-92:27
Thu Mar 03 18:10:41 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_f1eac054
UUID: 02feade5_17259c46
Bytes: 36
Cool. Thanks for the valuable input.

104:7-104:27
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_28a200d6
Bytes: 156
do we have test to check that this Flush and the one below will flush deleted entries to chemist? like making sure that OnCacheEntryDelete() will be invoked

104:7-104:27
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_28a200d6
UUID: 02feade5_6e7411a0
Bytes: 32
Yes, it is covered by unit_test.

File: report_aggregator_impl.h

34:11-34:31
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_8d2fe666
Bytes: 33
~ReportAggregatorImpl() override;

34:11-34:31
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_8d2fe666
UUID: 02feade5_0e346dc3
Bytes: 4
Done

36:5-36:8
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_6d289a62
Bytes: 67
Set -> Sets, and rest of the file. Please also check other files :)

36:5-36:8
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_6d289a62
UUID: 02feade5_0e5d8df3
Bytes: 4
Done

40:35-40:41
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_cd61eeb3
Bytes: 145
Report(...) override; append override to all these virtual methods, this file and other files

I am reviewing based on google3 code style here :)

40:35-40:41
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_cd61eeb3
UUID: 02feade5_ae761964
Bytes: 4
Done

45:6-45:23
Wed Mar 02 22:37:39 2016 +0000
Author: Wencheng Lu <5175@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_0d9116ce
Bytes: 50
nit:
flush_interval_ms()
or
GetNextFlushInterval()

45:2-45:5
Wed Mar 02 22:49:53 2016 +0000
Author: Dzmitry Huba <5165@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_8e74fdd9
Bytes: 104
Can we use here something similar Duration type rather than int with comment that it is in milliseconds?

45:2-45:5
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_8e74fdd9
UUID: 02feade5_0e2e2d42
Bytes: 137
A separate Duration type is easy to read, but NOT easy to use.  I think "int" is good as long as we clearly document it the unit as "ms".

45:6-45:23
Wed Mar 02 23:49:49 2016 +0000
Author: Wayne Zhang <5025@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 02feade5_0d9116ce
UUID: 02feade5_4eb31564
Bytes: 4
Done

53:35-53:46
Wed Mar 02 22:49:53 2016 +0000
Author: Dzmitry Huba <5165@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 02feade5_4e8af509
Bytes: 98
Please add comment here describing the semantic. Basically what happens after this method returns.

