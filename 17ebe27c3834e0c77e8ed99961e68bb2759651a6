Revision: 17ebe27c3834e0c77e8ed99961e68bb2759651a6
Patch-set: 1
File: src/service_control_client_impl.cc

170:0-174:56
Tue Jun 07 20:56:55 2016 +0000
Author: Lizan Zhou <5455@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
UUID: 23aca4b4_24b71646
Bytes: 81
actually did a little more research on this, can we move the promise into lambda?

170:0-174:56
Tue Jun 07 22:17:51 2016 +0000
Author: Gurgen Hrachyan <5425@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 23aca4b4_24b71646
UUID: 23aca4b4_676400d4
Bytes: 136
Not sure how we could do that as we need the future object here and potentially before the lambda gets invoked.

Am I missing something?

170:0-174:56
Tue Jun 07 22:40:06 2016 +0000
Author: Lizan Zhou <5455@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 23aca4b4_676400d4
UUID: 23aca4b4_e7937069
Bytes: 187
I meant to move only promise, nothing to do with future. The future should be still usable after moving promise.

See the sample code here:
http://en.cppreference.com/w/cpp/thread/promise

170:0-174:56
Tue Jun 07 23:32:45 2016 +0000
Author: Gurgen Hrachyan <5425@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 23aca4b4_e7937069
UUID: 23aca4b4_32b75846
Bytes: 326
I see. The thing is I can't bind as an r-value reference in c++11. So I'd need to sneak-in the reference and then std::move(), which should work, but seems too subtle and dangerous. Something like this:

Check(..., [&status_promise](Status status) {
   std::move(status_promise)->set_value(status);
}

Do you have better idea?

170:0-174:56
Tue Jun 07 23:39:29 2016 +0000
Author: Lizan Zhou <5455@3ccfd165-32a1-3a7c-ba90-d72e43bc4584>
Parent: 23aca4b4_32b75846
UUID: 23aca4b4_92cbccb8
Bytes: 296
Nothing better than reference and move in C++11. But note std::move is just a cast so you need bind it to a variable so the move can actually happen. so it will be:

Check(..., [&status_promise](Status status) {
  StatusPromise promise(std::move(status_promise));
  promise.set_value(status);
});

